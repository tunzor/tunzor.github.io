<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on tunzor</title>
    <link>https://tunzor.github.io/posts/</link>
    <description>Recent content in Posts on tunzor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tunzor.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automating the publication of a Hugo generated site with Google Cloud Build</title>
      <link>https://tunzor.github.io/posts/cloud-build-hugo-site/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/cloud-build-hugo-site/</guid>
      <description>Hugo is a really cool tool for getting a blog up and running quickly.
In a previous post I outlined how to use it to generate a site and then host that site on Github Pages or Google Cloud Storage. Now I want to take it a step further and automate its publication on Github Pages. Why? Cause I&amp;rsquo;m lazy, automation is cool, and doing so will make us look better in the optical sensors of our eventual robot overlords.</description>
    </item>
    
    <item>
      <title>DevOps Tools 101 - Kubernetes</title>
      <link>https://tunzor.github.io/posts/devops-tools-101-k8s/</link>
      <pubDate>Mon, 23 Dec 2019 10:54:32 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/devops-tools-101-k8s/</guid>
      <description>DevOps Tools 101 is a series of posts outlining in easy to digest form, the tools available and in use by the DevOps community.
Today we&amp;rsquo;ll be learning about Kubernetes (often abbreviated to k8s), which was originally developed and then open-sourced by Google.
The Official Description From kubernetes.io
 Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.
 The Breakdown open-source system - you can look at and modify the underlying code that makes up kubernetes</description>
    </item>
    
    <item>
      <title>Quick Tip: List docker images sorted by size</title>
      <link>https://tunzor.github.io/posts/docker-list-images-by-size/</link>
      <pubDate>Mon, 16 Dec 2019 10:31:48 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/docker-list-images-by-size/</guid>
      <description>The docker image ls command has an option for filtering output but what if we want to sort the images to find the really hefty ones? You know, the ones that might need to go the way of Old Yeller.
Huh? What&amp;rsquo;s that, docker? You can&amp;rsquo;t do that.
If you want something done right&amp;hellip;
It ain&amp;rsquo;t pretty but it works.
docker image ls --format &amp;quot;{{.Repository}}:{{.Tag}} {{.Size}}&amp;quot; | \ awk &#39;{if ($2~/GB/) print substr($2, 1, length($2)-2) * 1000 &amp;quot;MB - &amp;quot; $1 ; else print $2 &amp;quot; - &amp;quot; $1 }&#39; | \ sed &#39;/^0/d&#39; | \ sort -n   Side Note</description>
    </item>
    
    <item>
      <title>DevOps Tools 101 - Consul</title>
      <link>https://tunzor.github.io/posts/devops-tools-101-consul/</link>
      <pubDate>Fri, 13 Dec 2019 09:54:14 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/devops-tools-101-consul/</guid>
      <description>DevOps Tools 101 is a series of posts outlining in easy to digest form, the tools available and in use by the DevOps community.
Today we&amp;rsquo;ll be learning about Consul by Hashicorp.
The Official Description From Hashicorp&amp;rsquo;s site
 Consul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality.
 The Breakdown service mesh solution - a solution that allows individual services to discover and communicate quickly/securely/reliably with each other</description>
    </item>
    
    <item>
      <title>Deploying a dockerized two-tier app on Kubernetes</title>
      <link>https://tunzor.github.io/posts/k8s-two-tier-deploy/</link>
      <pubDate>Wed, 11 Dec 2019 18:56:27 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/k8s-two-tier-deploy/</guid>
      <description>For a great deal of developers, myself included, doing something is the preferred method of learning as opposed to reading how to do it. When I was wrapping my head around using kubernetes to manage my docker containers, I found that creating a deployment from scratch was invaluable. I&amp;rsquo;d like to walk you through that deployment and explain everything along the way.
Before we jump in, you&amp;rsquo;ll need to have:</description>
    </item>
    
    <item>
      <title>Quick Tip: Make a directory and enter it with one command</title>
      <link>https://tunzor.github.io/posts/mkdir-and-enter-one-liner/</link>
      <pubDate>Wed, 11 Dec 2019 18:41:10 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/mkdir-and-enter-one-liner/</guid>
      <description>We all make directories. It&amp;rsquo;s one way that we attempt to bring order to the chaos that is the filesystem.
We&amp;rsquo;re also pretty lazy. Creating a new directory and navigating into it is usually a two command affair:
mkdir order-i-say cd order-i-say  Not anymore it isn&amp;rsquo;t:
mkdir quickly-now &amp;amp;&amp;amp; cd $_   Explanation
$_ is the last argument passed to the previous command. In our case, it&amp;rsquo;s the directory name.</description>
    </item>
    
    <item>
      <title>Running a Hugo generated site on Github Pages and Google Cloud Storage</title>
      <link>https://tunzor.github.io/posts/hugo-on-gh-and-gcs/</link>
      <pubDate>Tue, 10 Dec 2019 09:45:13 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/hugo-on-gh-and-gcs/</guid>
      <description>Hugo, I just recently discovered, is one of many static site generators. You feed them content in the form of Markdown files and they spit out HTML pages which you can then provide to a web server for hosting.
This in and of itself might not be very interesting but the potential hosting environments are what particularly interest me.
Why go static? Since the pages are HTML, you don&amp;rsquo;t need to worry about having a server dynamically render a page when a user makes a request to your site.</description>
    </item>
    
  </channel>
</rss>