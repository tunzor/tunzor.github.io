<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tunzor</title>
    <link>https://tunzor.github.io/</link>
    <description>Recent content on tunzor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 03 Jul 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://tunzor.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Making a Game in One Day</title>
      <link>https://tunzor.github.io/posts/making-a-game-in-one-day/</link>
      <pubDate>Fri, 03 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/making-a-game-in-one-day/</guid>
      <description>Making a game is tough. We&amp;rsquo;ve read it in countless books and articles, heard it on podcasts, and seen it in the first hand video accounts of developers.
Making a game in a limited amount of time is tougher. Looming deadlines are always in the back of your head and crunch time seems to be an industry standard practice that doesn&amp;rsquo;t appear to be going away.
Making a game in the limited time span of one or two days should be the toughest then.</description>
    </item>
    
    <item>
      <title>Documentation and the Art of Reading</title>
      <link>https://tunzor.github.io/posts/terraform-docs-clarity/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/terraform-docs-clarity/</guid>
      <description>Lately I&amp;rsquo;ve been messing around with terraform; using it to set up cloud infrastructure for a practice project I&amp;rsquo;m working on. The syntax used in the configuration files it processes is easy to use but now and again, I need to check the docs. Thankfully they&amp;rsquo;re well written, nicely formatted, and contain lots of examples to follow along with.
And yet it still took me hours to implement what I thought would be a trivial config.</description>
    </item>
    
    <item>
      <title>Top Posts</title>
      <link>https://tunzor.github.io/top-posts/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tunzor.github.io/top-posts/</guid>
      <description>Making a Game in One Day
Running a Hugo generated site on Github Pages and Google Cloud Storage
Automating the publication of a Hugo generated site with Google Cloud Build
Deploying a dockerized two-tier app on Kubernetes
My Hobby: Game Dev - A History
Quick Tip: List docker images sorted by size</description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): I don&#39;t have ALL day</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-11/</link>
      <pubDate>Thu, 21 May 2020 01:01:01 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-11/</guid>
      <description> Click here to play the most up-to-date version
Easy Peasy What&amp;rsquo;s changed since last time? v0.13.0  Impatient customers! Customers will no longer wait indefinitely for their order  A countdown timer starts when the customer arrives and will change their shirt colour the closer it gets to 0  Shirt colour now starts out green and progresses to yellow and finally red  Serving a customer will now grant points based on how long they&amp;rsquo;ve been waiting The time extension granted on correctly served orders is now related to how close the customer is to leaving  More time is granted the closer they are to leaving   Difficulty levels  Starts out with just one customer and increases the number of customers for each level gained One additional customer will spawn with each new level starting at level 3 Level is increased after serving 3 customers correctly Level and customers served in it are displayed above the score as: CURRENT_LEVEL - CUSTOMERS_SERVED  Bug fixes  Customers no longer change state and leave after game over Customers no longer change state on start screen   </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): Sugar Rush</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-10/</link>
      <pubDate>Fri, 15 May 2020 01:01:01 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-10/</guid>
      <description> Click here to play the most up-to-date version
RTFM What&amp;rsquo;s changed since last time? v0.12.0  Added instructions page  Includes background &amp;ldquo;story&amp;rdquo;, how to play, and controls  Sugar! Do do doo do do doo&amp;hellip;  New orders: donut and pop (soda) with two item parts each Updated order matching code to work with varying sizes of orders instead of just 3 items All current orders and their parts are pictured below:   Updated food spawning code to only spawn items that aren&amp;rsquo;t currently being held  If all current order items are held, then ANY food item in the game can spawn (even if it&amp;rsquo;s not in a current customer&amp;rsquo;s order)  Added a new font  Unified all text to use the same font  Bug fixes  Game crashing bug occurred if game over was caused by all customers leaving   </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): I&#39;ll Tell You What I Want</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-9/</link>
      <pubDate>Wed, 13 May 2020 01:01:01 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-9/</guid>
      <description> Click here to play the most up-to-date version
Variety is the Spice of Life What&amp;rsquo;s changed since last time? v0.11.0  Customers now show their order above their heads!  Moving in front to interact will tint the order based on what Chef is currently holding: red if incorrect, green if correct (provides a quick way of seeing if held order is correct)  Two new orders!  New orders: pizza and ice cream sundae Food items (parts of orders) will only spawn if they&amp;rsquo;re in at least one customer&amp;rsquo;s order All current orders and their parts are pictured below:   Added final score to game over screen Removed garbage can interaction popup Bug fixes  Reduced number of items needed to trigger a game over (was too high after adding &amp;ldquo;Slide to Move&amp;rdquo; area)   </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): I Like to Move It, Move It</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-8/</link>
      <pubDate>Tue, 12 May 2020 01:01:03 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-8/</guid>
      <description> Click here to play the most up-to-date version
Just One for Me, Please What&amp;rsquo;s changed since last time? v0.10.0  Retooled input and movement  Added a &amp;ldquo;Slide to Move&amp;rdquo; area: tap and slide in it to move Chef Tap on brown area (with customers and stools) to interact Mouse input  Emulates touch input now (must move mouse in the &amp;ldquo;Slide to Move&amp;rdquo; area and hold down left button to move) Click on the brown area to interact OR right click anywhere   Added timer to customer to stop spamming of incorrect orders (protects against multiple accidental interaction inputs) Made the area above the garbage can a &amp;ldquo;safe area&amp;rdquo;: food won&amp;rsquo;t spawn over it Removed desktop input toggle options (keyboard and mouse inputs are still usable) Updated start screen instructions Bug fixes  Fixed bug that served multiple times when interact input pressed once Fixed bug that didn&amp;rsquo;t allow scrolling of instructions on touch screens Fixed bug that crashed game when pressing a key while holding mouse button   </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): Time to Start Me Up</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-7/</link>
      <pubDate>Sat, 09 May 2020 01:01:03 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-7/</guid>
      <description> Click here to play the most up-to-date version
Disco Fever What&amp;rsquo;s changed since last time?  Fancy new start screen!  Colourful title now shows you what you&amp;rsquo;re playing Instructions on how to play in a scrollable text area  Added a round timer of 60 seconds  Serving correct orders increases time available by 3 seconds Serving incorrect orders decreases time available by 2 seconds   </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): IPO Time</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-6/</link>
      <pubDate>Fri, 08 May 2020 01:01:03 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-6/</guid>
      <description> Click here to play the most up-to-date version
Mobile-ize What&amp;rsquo;s changed since last time?  Diner Drop can now be played in your browser!  Works on both desktop and mobile All future builds will be published at that link so check back for updates  Multiple input methods available  On desktop you can choose to play with mouse or keyboard controls  Mouse: Move Chef by moving the mouse and click anywhere in the bottom area (where the stools are) to interact with whatever is highlighted in front of Chef Keyboard: Move Chef left with a or left arrow, right with d or right arrow, and interact with things with s or down arrow You can toggle them on and off with either m for mouse controls or k for keyboard controls (shown by either an M or K in the top left of the screen)  On mobile, Chef will follow your finger much like the mouse movement above  Tap and drag to move Chef and tap anywhere in the bottom area (where the stools are) to interact with whatever is highlighted in front of Chef   Game over screen now shows a message about why the player lost  Game over now shows if you have too many held food items  Bug fixes  Fixed food items spawning off screen Only the top item of the food stack being held has collision detection (gif above demonstrates how the sides have no collision) Fixed issue where tapping and dragging to move on mobile would cause Chef to serve to a customer unintentionally   </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): It&#39;s a big one! Game Over, Man!</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-5/</link>
      <pubDate>Thu, 07 May 2020 01:01:03 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-5/</guid>
      <description>Click here to play the most up-to-date version
I Want to Speak to the Manager! What&amp;rsquo;s changed since last time? A LOT!  Customers aren&amp;rsquo;t taking your crap anymore; game over!  Serving the same customer 3 incorrect orders (partial or complete) will push them over the edge and cause them to leave If all (currently 3) customers leave, it&amp;rsquo;s game over Serving the correct order to a customer will despawn them, increase the score, and spawn a new one at a random available spot  Added game over screen with restart button  Endlessly drops food until restart pressed (super fun to watch) Stops collision detection on Chef and locks movement input  Generalized code around customer&amp;rsquo;s order (no longer hard coding burger as the only order) New font added for customers&amp;rsquo; feedback  Text will appear towards the centre of the screen depending on where the customer is (e.</description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): Front and Centre</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-4/</link>
      <pubDate>Thu, 07 May 2020 01:01:02 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-4/</guid>
      <description> Click here to play the most up-to-date version
Table for Three What&amp;rsquo;s changed since last time?  More customers!  3 customers will now spawn (in random positions!) at the counter waiting for their order  UI update: interactive objects (customers and garbage can) now start out dimmed and become fully bright when Chef is in front of them and can interact  </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): What&#39;ll ya have?</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-3/</link>
      <pubDate>Thu, 07 May 2020 01:01:01 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-3/</guid>
      <description> Click here to play the most up-to-date version
The Points Don&amp;rsquo;t Matter What&amp;rsquo;s changed since last time?  A customer has finally arrived!  The player can now stand in front of them and press down to serve them the order that Chef is currently holding Customers will provide feedback text on whether the order is correct or not Serving an order (correct or not) will remove it from Chef  Player now has a score to increase (or decrease&amp;hellip;)  Serving a correct order yields a point and an incorrect order deducts a point   </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): Variety is the Spice of Life</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-2/</link>
      <pubDate>Wed, 06 May 2020 01:01:02 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-2/</guid>
      <description> Click here to play the most up-to-date version
Catch Me If You Can What&amp;rsquo;s changed since last time?  Chef can now catch and hold the falling food; allowing orders to be made All three parts of the burger now spawn  Bottom: the bun and lettuce Middle: the patty and tomato Top: the onion and bun  The garbage can interaction now lets Chef throw away their currently held order  </description>
    </item>
    
    <item>
      <title>Godot in a gif(fy): A game dev blog told through gifs</title>
      <link>https://tunzor.github.io/posts/godot-diner-drop-1/</link>
      <pubDate>Wed, 06 May 2020 01:01:01 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/godot-diner-drop-1/</guid>
      <description>Click here to play the most up-to-date version
As outlined in a previous post, I started developing a game with the Godot engine about catching falling food and serving it to demanding customers, aptly named Diner Drop.
In this series of posts I intend on showcasing the progress made on the game&amp;rsquo;s development through the greatest of all Internet formats: the gif. A lot can be said with pictures (especially moving ones) but I may also include a few words too.</description>
    </item>
    
    <item>
      <title>My Hobby: Game Dev - A History</title>
      <link>https://tunzor.github.io/posts/my-game-dev-history/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/my-game-dev-history/</guid>
      <description>Like a lot of other developers, and even regular folks, I enjoy video games. If you had a nickel for every time you heard or read that somewhere, you&amp;rsquo;d probably be too rich to be reading this blog; instead enjoying your private island complete with whatever else rich people buy.
I&amp;rsquo;ll save you the rest of the cliched prose that usually follows that line and just say that I also enjoy learning about the process of, and actually, making games.</description>
    </item>
    
    <item>
      <title>Printing Jenkins credential values to the log</title>
      <link>https://tunzor.github.io/posts/jenkins-show-creds/</link>
      <pubDate>Tue, 21 Jan 2020 19:44:54 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/jenkins-show-creds/</guid>
      <description>The below is part of a screenplay I&amp;rsquo;m working on for a sequel in the Speed franchise, tentatively called Speed 3: Push IT. It also nicely sets up a scenario for the later bit about viewing Jenkins credentials in plaintext.
If you&amp;rsquo;d rather not read it, just scroll on down. I won&amp;rsquo;t be too hurt.
Speed 3: Push IT FADE IN
INT. SOME LARGE CORPORATION - NIGHT
JASMINE and BORIS are looking at Jasmine&amp;rsquo;s computer.</description>
    </item>
    
    <item>
      <title>Automating the publication of a Hugo generated site with Google Cloud Build</title>
      <link>https://tunzor.github.io/posts/cloud-build-hugo-site/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://tunzor.github.io/posts/cloud-build-hugo-site/</guid>
      <description>Hugo is a really cool tool for getting a blog up and running quickly.
In a previous post I outlined how to use it to generate a site and then host that site on Github Pages or Google Cloud Storage. Now I want to take it a step further and automate its publication on Github Pages. Why? Cause I&amp;rsquo;m lazy, automation is cool, and doing so will make us look better in the optical sensors of our eventual robot overlords.</description>
    </item>
    
    <item>
      <title>DevOps Tools 101 - Kubernetes</title>
      <link>https://tunzor.github.io/posts/devops-tools-101-k8s/</link>
      <pubDate>Mon, 23 Dec 2019 10:54:32 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/devops-tools-101-k8s/</guid>
      <description>DevOps Tools 101 is a series of posts outlining in easy to digest form, the tools available and in use by the DevOps community.
Today we&amp;rsquo;ll be learning about Kubernetes (often abbreviated to k8s), which was originally developed and then open-sourced by Google.
The Official Description From kubernetes.io
 Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.
 The Breakdown open-source system - you can look at and modify the underlying code that makes up kubernetes</description>
    </item>
    
    <item>
      <title>Quick Tip: List docker images sorted by size</title>
      <link>https://tunzor.github.io/posts/docker-list-images-by-size/</link>
      <pubDate>Mon, 16 Dec 2019 10:31:48 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/docker-list-images-by-size/</guid>
      <description>The docker image ls command has an option for filtering output but what if we want to sort the images to find the really hefty ones? You know, the ones that might need to go the way of Old Yeller.
Huh? What&amp;rsquo;s that, docker? You can&amp;rsquo;t do that.
If you want something done right&amp;hellip;
It ain&amp;rsquo;t pretty but it works.
docker image ls --format &amp;quot;{{.Repository}}:{{.Tag}} {{.Size}}&amp;quot; | \ awk &#39;{if ($2~/GB/) print substr($2, 1, length($2)-2) * 1000 &amp;quot;MB - &amp;quot; $1 ; else print $2 &amp;quot; - &amp;quot; $1 }&#39; | \ sed &#39;/^0/d&#39; | \ sort -n   Side Note</description>
    </item>
    
    <item>
      <title>DevOps Tools 101 - Consul</title>
      <link>https://tunzor.github.io/posts/devops-tools-101-consul/</link>
      <pubDate>Fri, 13 Dec 2019 09:54:14 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/devops-tools-101-consul/</guid>
      <description>DevOps Tools 101 is a series of posts outlining in easy to digest form, the tools available and in use by the DevOps community.
Today we&amp;rsquo;ll be learning about Consul by Hashicorp.
The Official Description From Hashicorp&amp;rsquo;s site
 Consul is a service mesh solution providing a full featured control plane with service discovery, configuration, and segmentation functionality.
 The Breakdown service mesh solution - a solution that allows individual services to discover and communicate quickly/securely/reliably with each other</description>
    </item>
    
    <item>
      <title>Deploying a dockerized two-tier app on Kubernetes</title>
      <link>https://tunzor.github.io/posts/k8s-two-tier-deploy/</link>
      <pubDate>Wed, 11 Dec 2019 18:56:27 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/k8s-two-tier-deploy/</guid>
      <description>For a great deal of developers, myself included, doing something is the preferred method of learning as opposed to reading how to do it. When I was wrapping my head around using kubernetes to manage my docker containers, I found that creating a deployment from scratch was invaluable. I&amp;rsquo;d like to walk you through that deployment and explain everything along the way.
Before we jump in, you&amp;rsquo;ll need to have:</description>
    </item>
    
    <item>
      <title>Quick Tip: Make a directory and enter it with one command</title>
      <link>https://tunzor.github.io/posts/mkdir-and-enter-one-liner/</link>
      <pubDate>Wed, 11 Dec 2019 18:41:10 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/mkdir-and-enter-one-liner/</guid>
      <description>We all make directories. It&amp;rsquo;s one way that we attempt to bring order to the chaos that is the filesystem.
We&amp;rsquo;re also pretty lazy. Creating a new directory and navigating into it is usually a two command affair:
mkdir order-i-say cd order-i-say  Not anymore it isn&amp;rsquo;t:
mkdir quickly-now &amp;amp;&amp;amp; cd $_   Explanation
$_ is the last argument passed to the previous command. In our case, it&amp;rsquo;s the directory name.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://tunzor.github.io/about/</link>
      <pubDate>Wed, 11 Dec 2019 11:58:02 -0500</pubDate>
      
      <guid>https://tunzor.github.io/about/</guid>
      <description>Long-winded explanations about myself aren&amp;rsquo;t really my thing.
Instead, please enjoy this bulleted list:
 Experienced developer Hobbyist Android and game developer Volunteer coding instructor and mentor Google Cloud Certified Cloud Engineer Retired YouTuber musician (but still a lover of music and video) Lover of learning  </description>
    </item>
    
    <item>
      <title>Running a Hugo generated site on Github Pages and Google Cloud Storage</title>
      <link>https://tunzor.github.io/posts/hugo-on-gh-and-gcs/</link>
      <pubDate>Tue, 10 Dec 2019 09:45:13 -0500</pubDate>
      
      <guid>https://tunzor.github.io/posts/hugo-on-gh-and-gcs/</guid>
      <description>Hugo, I just recently discovered, is one of many static site generators. You feed them content in the form of Markdown files and they spit out HTML pages which you can then provide to a web server for hosting.
This in and of itself might not be very interesting but the potential hosting environments are what particularly interest me.
Why go static? Since the pages are HTML, you don&amp;rsquo;t need to worry about having a server dynamically render a page when a user makes a request to your site.</description>
    </item>
    
  </channel>
</rss>